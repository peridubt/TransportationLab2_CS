using TransportationLab2.View;

namespace TransportationLab2
{
    #region Общее описание задания
    /*
    Задание 2
    Цель — создание модели, описывающей процесс, построение иерархии классов,
    отражающей данную предметную область.
    
    По действиям пользователя
    следует создавать экземпляры классов иерархии. Использовать исключения. 

    Разработать класс менеджера, позволяющего создавать, 
    уничтожать и модифицировать объекты (в некоторых задачах — динамика от таймера).

    Для каждой задачи необходимо реализовать объектную модель. 
    В реализации задач должны присутствовать наследование, агрегация и др.
    взаимодействия классов.
    
    Интерфейс к задаче необходимо выполнить на
    WinForms с использованием компонентов. Для отображения использовать
    2D-графику или графические элементы управления. 
    
    Формы и компоненты используются только для отображения и ввода данных, 
    но не для хранения объектов. Использовать исключения (exceptions).
    */
    #endregion

    #region Требования
    /*
    Требования к реализации.
     Приложение реализовать как MVC. Модель — иерархия классов.
    View — демо в автоматическом режиме.
     Действующие объекты должны быть реализованы как 
    потоки с необходимой синхронизацией.
     Для оповещения об изменениях использовать 
    шаблон «Наблюдатель».
     Для создания действующих объектов 
    использовать шаблон «Фабрика».
     Использование других шаблонов приветствуется.*/
    #endregion

    #region Условие
    /*
    10. Грузоперевозки. Основные сущности: автомашины, города,
    между которыми осуществляются перевозки, сеть дорог, грузы,
    их типы, клиенты. Смоделировать процесс перевозки грузов.
    */
    #endregion

    #region Логика работы моей программы
    /*
    Автоматичекски добавляются (рандомные) грузовики: максимально — 5 шт.
    Автоматически добавляются (рандомные) клиенты : максимально — 10 шт.
    В форме есть конпка "Старт", которая запускает процесс выдачи заказов 
    незанятым грузовикам (происходит каждые 5 секунд).
    Один грузовик может иметь один заказ. Кнопка "Стоп" приостанавливает процесс выдачи заказов, 
    но сами заказы не отменяет.
    У каждого грузовика есть клиент, которому надо доставить груз. Сам клиент он подписывается на event, 
    который в будущем уведомит его о доставке и запустит (через Invoke) процесс передачи заказа. 
    После доставки клиент отписывается от данного event.
    Один поток — это один грузовик. Сам поток запускает бесконечный цикл, 
    где грузовик запрашивает каждые 100 мс, не поступил ли ему новый заказ.
    При положительном результате он сразу начинает своё движение.
    
    Из MVC у меня:
    Model — класс Manager + классы различных сущностей;
    Controller — класс Animation;
    View — классы различных винформ.
    Из фабрики: фабрика грузов различных типов (я решил сделать 4 груза).
    Наблюдатель: события, которые уведомляют клиентов.
     */
    #endregion
    
    internal static class Program   
    {
        [STAThread]
        static void Main()
        {
            ApplicationConfiguration.Initialize();
            Application.Run(new MainForm());
        }
    }
}